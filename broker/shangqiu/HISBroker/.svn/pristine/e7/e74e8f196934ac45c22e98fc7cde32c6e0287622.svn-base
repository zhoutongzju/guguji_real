using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;

using System.Threading;
using System.IO;
using Maroland.DataAccess;

namespace RISBroker
{
    public partial class frmMain : Form
    {

        delegate void ButtonEnable();
        delegate void ShowDataToFrom(string Msg, string queueid, string patName, string patid, string modality, string modalityid, string patType, bool isSuccess);

        private Thread RunThread = null;//运行线程
        private Thread GuardThread = null;//守护线程

        private bool Stop = false;

        public frmMain()
        {
            InitializeComponent();
        }

        private void frmMain_Load(object sender, EventArgs e)
        {

        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            this.btnSetting.Enabled = false;
            this.btnStart.Enabled = false;
            this.btnStop.Enabled = true;
            this.lvData.Items.Clear();
            try
            {
                Stop = false;
                StartWait();
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }
        }

        private void btnSetting_Click(object sender, EventArgs e)
        {
            frmSetting frm = new frmSetting();
            frm.ShowDialog();
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            Stop = true;
            this.btnSetting.Enabled = true;
            this.btnStart.Enabled = true;
            this.btnStop.Enabled = false;
            try
            {
                if (RunThread != null)
                {
                    try
                    {
                        RunThread.Abort();
                    }
                    catch (Exception ex)
                    {
                        XLogManager.LogError(ex);
                    }
                }

                if (GuardThread != null)
                {
                    try
                    {
                        GuardThread.Abort();
                    }
                    catch (Exception ex)
                    {
                        XLogManager.LogError(ex);
                    }
                }
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }
        }

        #region 启动轮询

        private void StartWait()
        {
            try
            {
                RunThread = new Thread(ThreadRun);
                RunThread.IsBackground = true;
                RunThread.Start();

                Thread.Sleep(100);//休息一下

                GuardThread = new Thread(StartGuard);
                GuardThread.IsBackground = true;
                GuardThread.Start(RunThread);
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }

        }


        private void StartGuard(object obj)
        {
            Thread t = obj as Thread;
            if (t != null)
            {
                try
                {
                    t.Join();
                    XLogManager.LogError("线程结束了");
                    if (!Stop)
                    {
                        StartWait();
                    }
                }
                catch (Exception ex)
                {
                    XLogManager.LogError(ex);
                }

            }
        }

        private void ThreadRun()
        {
            while (true)
            {
                if (ConfigHelper.GetConfig("DStart", "0") == "1")
                {
                    if ((DateTime.Now.ToString("HH:mm") == ConfigHelper.GetConfig("DTime", "00:00")))
                    {
                        RunData();
                    }
                }
                else
                {
                    RunData();
                }

                if (Stop)
                {
                    break;
                }
                Thread.Sleep(int.Parse(ConfigHelper.GetConfig("ProverTime", "5")) * 1000);
            }
        }

        private void RunData()
        {
            XLogManager.LogInfo("轮询开始");
            try
            {
                List<string> listReportSeq = new List<string>();
                DataTable table = GetDbData();
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        string his_id = Helper.GetValue(row[T_Order.F_His_id]);

                        string pattype = Helper.GetValue(row[T_Order.F_Pattype]);

                        string queueid = Helper.GetValue(row["queueid"]);
                        string patid = Helper.GetValue(row[T_Patient.F_PatID]);
                        string patName = Helper.GetValue(row[T_Patient.F_PatName]);
                        string modalityid = Helper.GetValue(row[T_Order.F_Modalityid]);
                        string modality = Helper.GetValue(row[T_Order.F_Modality]);

                        bool bStatus = false;
                        if (!String.IsNullOrEmpty(his_id))
                        {
                            string ip = ConfigHelper.GetConfig("ProxyIP");
                            int port = Convert.ToInt32(ConfigHelper.GetConfig("ProxyPort"));
                            row["patid"] = GetHisPatID(row["his_id"].ToString());
                            //row["ExamItemID"] = GetHisExamIDFromRis(row["ExamItemID"].ToString());
                            //row["ExamItemID"] = GetMapValue("EXAMTYPE", modality);

                            XLogManager.LogInfo("上传HIS开始，his_id: " + his_id);
                            bStatus = UploadToHis(ip, port, row);
                            if (bStatus)
                            {
                                // 成功了才更新标记, 使得错误的能够重试
                                UpdateQueueFlag(queueid, bStatus);
                            }
                        }
                        else
                        {
                            XLogManager.LogInfo("HIS_ID为空，不上传，queue_id: " + queueid);
                            // his_id为空的不需要重试
                            UpdateQueueFlag(queueid, false);
                        }

                        ShowData(string.Empty, queueid, patName, patid, modality, modalityid, pattype, bStatus);
                    }
                }
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }
            finally
            {
            }

            XLogManager.LogInfo("轮询结束");
        }

        private bool UploadToHis(string ip, int port, DataRow row)
        {
            bool ret = false;
            try
            {
                RISServiceProxy.Proxy risproxy = new RISServiceProxy.Proxy();
                string errinfo = "";
                ret = risproxy.SenReport(ip, port, row, ref errinfo);

                if(ret)
                {
                    XLogManager.LogInfo("上传HIS失败成功");
                }
                else
                {
                    XLogManager.LogInfo("上传HIS失败，错误信息:" + errinfo);
                }
            }
            catch(Exception ex)
            {
                XLogManager.LogError("上传HIS发生异常：" + ex);
            }

            return ret;
        }

        private string GetHisExamIDFromRis(string risExaID)
        {
            string hisExamID = "";
     
            try
            {
                DataTable table = new DataTable();
                string sql = string.Format("select * from t_his_examitemlink where ris_examitemid='{0}'", risExaID);

                DataMgr mgr = DataMgrFactory.CreateDataMgr(DataMgrFactory.DBNameEnum.RIS_DB);
                table = mgr.GetDataTableBySql(sql);

                if ((table != null) && (table.Rows.Count > 0))
                {
                    hisExamID = Helper.GetValue(table.Rows[0]["his_examitemid"]);
                }
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }

            return hisExamID;
        }


        private string GetHisPatID(string his_id)
        {
            string hisPatID = "";

            try
            {
                DataTable table = new DataTable();
                string sql = string.Format("select PatientId from x_order where OrderId='{0}' and DeleteFlag='0'", his_id);

                DataMgr mgr = DataMgrFactory.CreateDataMgr(DataMgrFactory.DBNameEnum.RIS_DB);
                table = mgr.GetDataTableBySql(sql);

                if ((table != null) && (table.Rows.Count > 0))
                {
                    hisPatID = Helper.GetValue(table.Rows[0]["PatientId"]);
                }
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }
            XLogManager.LogError("通过HIS_ID获取HIS的病人ID：转换后得到的值：" +hisPatID );
            return hisPatID;
        }

        private string GetMapValue(string section, string key, bool needExcept = false)
        {
            string detailKey = section + "-" + key.Trim();
            string value = ConfigHelper.GetConfig(detailKey, "");
            if (value == "")
            {
                if (needExcept)
                {
                    throw new Exception(string.Format("{0} key not found.", key));
                }
                else
                {
                    XLogManager.LogInfo(string.Format("{0} key not found.", key));
                }
            }
            return value;
        }

        private DataTable GetDbData()
        {
            string sql = @"
            select o.accno, o.his_id, o.orderstatus, o.orderseq, o.registerid, o.register, o.clinicid, o.clinic, o.pattype, o.modalityid,
                  o.hospitalid, o.orderdt, o.performdeptid, o.orderdrid, o.orderdr, o.examitem, o.technicianid, o.technician, o.modality,
                  r.queueid, l.reportseq,
                  p.patname,p.patid, p.patseq, p.patname, p.patsex, p.patbirthday, p.inpatientid, p.outpatientid, p.idcard, p.hospitalid,
                  tr.reportdr, tr.reportdrid, o.clinicid, tr.reportdt, tr.diagresult, tr.studyresult, tr.abnormal, tr.verifydrid, tr.verifydr,
                  bp.bodypartcode bodypartid, bp.bodypart,
                  decode(o.pattype, 'P', p.physicalexamid, 'I', p.inpatientid, 'O', p.outpatientid, p.outpatientid) otherpatid,
                  i.his_examitemid examitemid
              from t_report_queue r
                  join t_order o on r.orderid = o.orderseq
                  join t_patient p on o.patseq=p.patseq
                  join t_orderreportlink l on o.orderseq=l.orderseq
                  join t_report tr on tr.reportseq=o.reportseq
                  left join t_his_examitemlink i on i.ris_examitemid = o.examitemid
                  left join t_bodypart bp on bp.bodypartid = o.bodypartid 
              where r.read_verify_flag is null
                  and rownum <= 100
                  and o.orderstatus >= 1170
                  and r.worktime>=to_date('{0}','yyyy-mm-dd hh24:mi:ss')            
                  and r.worktime<=to_date('{1}','yyyy-mm-dd hh24:mi:ss')           
              order by r.worktime asc";

            DataTable table = new DataTable();
            try
            {
                sql = string.Format(sql
              , (ConfigHelper.GetConfig("StartDate", "1979-01-01") + " 00:00:00")
              , DateTime.Now.AddMinutes(-int.Parse(ConfigHelper.GetConfig("LateTime", "0"))).ToString("yyyy-MM-dd HH:mm:ss"));

                DataMgr mgr = DataMgrFactory.CreateDataMgr(DataMgrFactory.DBNameEnum.RIS_DB);
                table = mgr.GetDataTableBySql(sql);
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
            }

            return table;
        }

        private bool UpdateQueueFlag(string queueid, bool isSuccess)
        {
            bool flag = false;
            string sql = string.Format(" update t_report_queue q set q.read_verify_flag='{0}' where q.queueid='{1}'", (isSuccess ? "Y" : "E"), queueid);
            try
            {
                DataMgr mgr = DataMgrFactory.CreateDataMgr(DataMgrFactory.DBNameEnum.RIS_DB);
                mgr.ExecuteSql(sql);
                flag = true;
            }
            catch (Exception ex)
            {
                XLogManager.LogError(ex);
                flag = false;
            }
            return flag;
        }


        private static void HasOrNewDic(string dicPath)
        {
            if (!Directory.Exists(dicPath))
            {
                Directory.CreateDirectory(dicPath);
            }
        }


        #endregion

        #region 显示数据
        private void ShowData(string Msg, string queueid, string patName, string patid, string modality, string modalityid, string patType, bool isSuccess)
        {
            if (this.lvData.InvokeRequired)
            {
                this.BeginInvoke(new ShowDataToFrom(ShowData), Msg, queueid, patName, patid, modality, modalityid, patType, isSuccess);
            }
            else
            {
                try
                {
                    ListViewItem item = new ListViewItem((this.lvData.Items.Count + 1).ToString());
                    item.SubItems.Add(queueid);
                    item.SubItems.Add(patType);
                    item.SubItems.Add(modality);
                    item.SubItems.Add(DateTime.Now.ToString());
                    item.SubItems.Add(patName);
                    item.SubItems.Add(patid);
                    item.SubItems.Add(modalityid);
                    //if (patType.Trim().ToUpper() == "P")
                        item.SubItems.Add((isSuccess ? "成功" : "失败"));
                    //else
                        //item.SubItems.Add("放弃");
                    item.ForeColor = Color.Red;
                    if (isSuccess)
                        item.ForeColor = Color.Blue;
                    //if (patType.Trim().ToUpper() != "P")
                    //{
                    //    item.ForeColor = Color.Orange;
                    //}

                    this.lvData.Items.Add(item);
                    this.lvData.EnsureVisible(this.lvData.Items.Count - 1);
                }
                catch (Exception ex)
                {
                    XLogManager.LogError(ex);
                }
            }
        }

        private void AddLog(string queueid, bool isSuccess)
        {
            try
            {
                DataMgr mgr = DataMgrFactory.CreateDataMgr(DataMgrFactory.DBNameEnum.RIS_DB);

                T_reporttofile model = new T_reporttofile();
                model.Id = Guid.NewGuid().ToString();
                model.Queueid = queueid;
                model.Result = (isSuccess ? "成功" : "失败");
                model.Datetime = DateTime.Now.ToString();

                mgr.SaveData(model);
            }
            catch (Exception ex)
            {
                XLogManager.LogError("记录日志发生错误", ex);
            }

        }
        #endregion

        private void frmMain_SizeChanged(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized)
                HideFrom();
        }

        private void HideFrom()
        {
            this.ShowInTaskbar = false;
            this.notifyIcon1.Visible = true;
            this.Hide();
        }



        private void ShowForm()
        {
            if (!this.ShowInTaskbar)
            {
                this.ShowInTaskbar = true;

            }
            this.notifyIcon1.Visible = false;
            this.Show();
            this.Activate();
            this.WindowState = FormWindowState.Normal;
        }



        private void notifyIcon1_Click(object sender, EventArgs e)
        {
            ShowForm();
        }




    }
}
